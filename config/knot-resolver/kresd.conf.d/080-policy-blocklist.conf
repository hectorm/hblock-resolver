-- Add blocklist zone

if not stats then modules.load('stats') end
if not http then modules.load('http') end

local lru = require('lru')
local recently_blocked = lru.new(tonumber(env.KRESD_STATS_BLOCKED_COUNT))

local blocked_metric = 'answer.blocked'
stats[blocked_metric] = 0

local function deny_and_count(msg)
	local deny = policy.DENY_MSG(msg)
	local is_debug = log_level() == 'debug'
	return function (_, req)
		local qry = req:current()
		local qname = kres.dname2str(qry:name()):lower()
		local count = recently_blocked:get(qname)
		if count == nil then count = 0 end
		recently_blocked:set(qname, count + 1)
		stats[blocked_metric] = stats[blocked_metric] + 1
		if is_debug then
			io.stdout:write('[poli] blocked domain: ' .. qname .. '\n')
		end
		return deny(_, req)
	end
end

local function get_recently_blocked()
	local out = {}
	for qname, count in recently_blocked:pairs() do
		table.insert(out, { qname = qname, count = count })
	end
	if out[1] == nil then return '[]'
	else return tojson(out) end
end

policy.add(policy.rpz(
	deny_and_count('Blocked domain'),
	env.KRESD_DATA_DIR .. '/hblock/blocklist.rpz',
	true
))

http.configs._builtin.webmgmt.endpoints['/blocked'] = {
	'application/json',
	function ()
		return get_recently_blocked()
	end
}
