-- Add blocklist zone

if not stats then modules.load('stats') end
if not http then modules.load('http') end

local lru = require('lru')
local recently_blocked = lru.new(tonumber(env.KRESD_RECENTLY_BLOCKED_NUMBER))

local blocked_metric = 'answer.blocked'
stats[blocked_metric] = 0

local function deny_and_count(msg)
	local deny = policy.DENY_MSG(msg)
	local is_debug = log_level() == 'debug'
	return function (_, req)
		local qry = req:current()
		local qname = kres.dname2str(qry:name()):lower()
		local count = recently_blocked:get(qname)
		if count == nil then count = 0 end
		recently_blocked:set(qname, count + 1)
		stats[blocked_metric] = stats[blocked_metric] + 1
		if is_debug then
			io.stdout:write('[poli] blocked domain: ' .. qname .. '\n')
		end
		return deny(_, req)
	end
end

policy.add(policy.rpz(
	deny_and_count('Blocked domain'),
	env.KRESD_DATA_DIR .. '/hblock/blocklist.rpz',
	true
))

function get_recently_blocked()
	local rb = {}
	for qname, count in recently_blocked:pairs() do
		rb[qname] = count
	end
	return rb
end

http.configs._builtin.webmgmt.endpoints['/recently_blocked'] = {
	'application/json',
	function ()
		local out = {}
		for _, result in pairs(map('get_recently_blocked()')) do
			if type(result) == 'table' then
				for qname, count in pairs(result) do
					out[qname] = (out[qname] or 0) + count
				end
			end
		end
		return tojson(out)
	end
}
